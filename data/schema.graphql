schema {
  query: Query
  mutation: Mutation
}

type Company {
  _id: ID
  name: String
  token: String
  email: String
}

input CompanyInput {
  _id: ID
  name: String
  token: String
  email: String
  password: String
}

type CreateCompanyResponse {
  company: Company
  errors: [UserError]
}

type CreateDriverResponse {
  driver: Driver
  errors: [UserError]
}

type CreateManagerResponse {
  manager: Manager
  errors: [UserError]
}

type CreateOwnerResponse {
  owner: Owner
  errors: [UserError]
}

type CreateStationResponse {
  station: Station
  errors: [UserError]
}

type DeleteCompanyResponse {
  company: Company
  errors: [UserError]
}

type DeleteDriverResponse {
  driver: Driver
  errors: [UserError]
}

type DeleteManagerResponse {
  manager: Manager
  errors: [UserError]
}

type DeleteOwnerResponse {
  owner: Owner
  errors: [UserError]
}

type DeleteStationResponse {
  station: Station
  errors: [UserError]
}

type Driver {
  _id: ID
  email: String
  phoneNumber: String
  firstName: String
  lastName: String
  company: Company
}

input DriverInput {
  _id: ID
  email: String
  password: String
  phoneNumber: String
  firstName: String
  lastName: String
  companyId: ID
}

type Manager {
  _id: ID
  email: String
  firstName: String
  lastName: String
  phoneNumber: String
  company: String
  companyId: ID
}

input ManagerInput {
  _id: ID
  email: String
  password: String
  firstName: String
  lastName: String
  phoneNumber: String
  company: String
  companyId: ID
}

type Mutation {
  createCompany(input: CompanyInput): CreateCompanyResponse
  updateCompany(input: CompanyInput): UpdateCompanyResponse
  deleteCompany(id: ID): DeleteCompanyResponse
  createManager(input: ManagerInput): CreateManagerResponse
  updateManager(input: ManagerInput): UpdateManagerResponse
  deleteManager(id: ID): DeleteManagerResponse
  createDriver(input: DriverInput): CreateDriverResponse
  updateDriver(input: DriverInput): UpdateDriverResponse
  deleteDriver(id: ID): DeleteDriverResponse
  createStation(input: StationInput): CreateStationResponse
  updateStation(input: StationInput): UpdateStationResponse
  deleteStation(id: ID): DeleteStationResponse
  createOwner(input: OwnerInput): CreateOwnerResponse
  updateOwner(input: OwnerInput): UpdateOwnerResponse
  deleteOwner(id: ID): DeleteOwnerResponse
}

type Owner {
  _id: ID
  email: String
  firstName: String
  lastName: String
  address: String
  paymentAmount: Float
  stations: [Station]
}

input OwnerInput {
  _id: ID
  email: String
  password: String
  firstName: String
  lastName: String
  address: String
  paymentAmount: Float
}

type Product {
  pumpId: Int
  name: String
  price: Float
  updatedAt: String
}

input ProductInput {
  pumpId: Int
  name: String
  price: Float
  updatedAt: String
}

type Query {
  root: Root
  company(_id: ID): Company
  manager(_id: ID): Manager
  driver(_id: ID): Driver
  owner(_id: ID): Owner
  station(_id: ID): Station
  viewer: Viewer
}

type Root {
  greetings: String
}

type Station {
  _id: ID
  ownerId: ID
  geohash: String
  products: [Product]
  currency: String
  phoneNumber: String
  address: String
  lat: Float
  lng: Float
  brand: String
  updatedAt: String
  fullAddress: String
  zipline: Zipline
  pumpIds: [Int]
  readyForSale: Boolean
}

input StationInput {
  _id: ID
  ownerId: ID
  geohash: String
  products: [ProductInput]
  currency: String
  phoneNumber: String
  address: String
  lat: Float
  lng: Float
  brand: String
  updatedAt: String
  fullAddress: String
  zipline: ZiplineInput
  pumpIds: [Int]
  readyForSale: Boolean
}

type UpdateCompanyResponse {
  company: Company
  errors: [UserError]
}

type UpdateDriverResponse {
  driver: Driver
  errors: [UserError]
}

type UpdateManagerResponse {
  manager: Manager
  errors: [UserError]
}

type UpdateOwnerResponse {
  owner: Owner
  errors: [UserError]
}

type UpdateStationResponse {
  station: Station
  errors: [UserError]
}

type UserError {
  key: String
  msg: String
}

type Viewer {
  name: String
  companies: [Company]
  managers: [Manager]
  drivers: [Driver]
  owners: [Owner]
  stations: [Station]
}

type Zipline {
  storeId: Int
}

input ZiplineInput {
  storeId: Int
}
